buildscript {
  ext { springBootVersion = '1.4.0.RELEASE' }
  repositories { jcenter() }
  dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}

plugins {
  id "com.cinnober.gradle.semver-git" version "2.2.2"
  id "com.jfrog.bintray" version "1.7.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'de.gessnerfl.rabbitmq'
description = """RabbitMQ :: Queue Management :: List/Move/Delete dead messages from queues"""

ext.scmUrl = 'git@github.com:gessnerfl/rabbitmq-queue-management.git'
ext.projectUrl = 'https://github.com/gessnerfl/rabbitmq-queue-management'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { jcenter() }

dependencies {
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-remote-shell'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'io.github.openfeign:feign-core:9.3.1'
  compile 'io.github.openfeign:feign-gson:9.3.1'
  compile 'io.github.openfeign:feign-slf4j:9.3.1'
  compile 'com.google.code.gson:gson:2.7'
  compile 'commons-codec:commons-codec:1.10'

  compile 'org.webjars.bower:jquery:3.1.0'
  compile 'org.webjars.bower:angularjs:1.5.8'
  compile 'org.webjars.bower:angular-resource:1.5.8'
  compile 'org.webjars.bower:bootstrap:3.3.7'
  compile 'org.webjars.bower:json-formatter:0.6.0'
  compile 'org.webjars.bower:js-base64:2.1.9'

  compile 'com.rabbitmq:amqp-client:3.6.5'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.hamcrest:hamcrest-core:1.3'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}


publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            
            groupId project.group
            artifactId project.name
            version project.version
            
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name project.name
                    description project.description
                    url project.projectUrl

                    scm {
                        connection 'scm:git:'+project.scmUrl
                        developerConnection 'scm:git:'+project.scmUrl
                        url project.scmUrl
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'gessnerfl'
                            name 'Florian Gessner'
                            email 'flo.gessner@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : null
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : null
    
    publications = ['BintrayPublication']
    dryRun = false
    publish = true
    pkg {
        repo = 'oss-de.gessnerfl'

        name = project.name
        desc = project.description
        userOrg = null

        websiteUrl = project.projectUrl
        issueTrackerUrl = project.projectUrl+'/issues'
        vcsUrl = project.scmUrl
        licenses = ['Apache-2.0']
        labels = [ 'rabbitmq' ]
        publicDownloadNumbers = true
        attributes = [:]
        version {
            name = project.version
            vcsTag = project.version
            attributes = [:]
            gpg {
                sign = true
                passphrase = project.hasProperty('gpgPassphrase') ? project.getProperty('gpgPassphrase') : null
            }
            mavenCentralSync {
                sync = true
                user = project.hasProperty('sonatypeUsername') ? project.getProperty('sonatypeUsername') : null
                password = project.hasProperty('sonatypePassword') ? project.getProperty('sonatypePassword') : null
            }
        }
    }
}
